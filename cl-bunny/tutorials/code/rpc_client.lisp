(ql:quickload :cl-bunny.examples)
(ql:quickload :nibbles)

(in-package :cl-bunny.examples)

(defun int32-to-octet(val)
  (declare (type (signed-byte 32) val)
           (optimize (sb-c::insert-debug-catch 0)  
                     (speed 3) 
                     (compilation-speed 0)
                     (safety 0)))
  (let ((array (make-array 4 :element-type '(unsigned-byte 8))))
    (setf (aref array 0) (ldb (byte 8 0) val))
    (setf (aref array 1) (ldb (byte 8 8) val))
    (setf (aref array 2) (ldb (byte 8 16) val))
    (setf (aref array 3) (ldb (byte 8 24) val))
    array))

(defun start-client (n)
  (with-connection ("amqp://")
    (with-channel ()
      (let ((x (default-exchange))
            (server-queue "rpc_queue")
            (reply-queue (queue.declare "" :auto-delete t))
            (lock (bt:make-lock))
            (condition (bt:make-condition-variable))
            (result nil))
        (format t " [x] Requesting fib(~a)~%" n)
        (bt:with-lock-held (lock)
          (subscribe reply-queue (lambda (message)
                                   (bt:with-lock-held (lock)
                                     (setf result (nibbles:sb32ref/le (coerce (message-body message) '(vector (unsigned-byte 8))) 0))
                                     (bt:condition-notify condition))))
          (publish x
                   (int32-to-octet n)
                   :routing-key server-queue
                   :properties `((:correlation-id . ,(format nil "~a~a~a" (random 100) (random 100) (random 100)))
                                 (:reply-to . ,reply-queue)))
          (bt:condition-wait condition lock)
          (format t " [.] Got ~a~%" result)
          result)))))

(start-client 0)
(start-client 1)
(start-client 2)
(start-client 3)
(start-client 4)
(start-client 5)

